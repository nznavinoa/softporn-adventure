/**
 * Blackjack - Implements the blackjack (21) mini-game
 * Handles betting, dealing, player and dealer turns
 */
import eventBus from '../main.js';
import { GameEvents } from '../core/GameEvents.js';

export default class Blackjack {
    constructor(game) {
        this.game = game;
        this.active = false;
        
        // Blackjack game state
        this.state = {
            playerCards: [],
            dealerCards: [],
            playerTotal: 0,
            dealerTotal: 0,
            bet: 0,
            gamePhase: 'betting' // betting, player, dealer, result
        };
        
        // Set up event subscriptions
        this.setupEventListeners();
    }
    
    setupEventListeners() {
        eventBus.subscribe(GameEvents.MINIGAME_STARTED, (data) => {
            if (data.game === "BLACKJACK") {
                this.startGame();
            }
        });
        
        // Listen for UI events related to blackjack
        document.addEventListener('click', (event) => {
            if (event.target.id === 'place-bet') {
                const betInput = document.getElementById('blackjack-bet');
                if (betInput) {
                    this.placeBlackjackBet(betInput.value);
                }
            } else if (event.target.id === 'blackjack-hit') {
                this.blackjackHit();
            } else if (event.target.id === 'blackjack-stand') {
                this.blackjackStand();
            } else if (event.target.id === 'blackjack-play-again') {
                this.resetGame();
            } else if (event.target.id === 'blackjack-quit') {
                this.endGame();
            }
        });
    }
    
    // Start the blackjack game
    startGame() {
        try {
            // Check if we're in the 21 room
            if (this.game.currentRoom !== 14) {
                this.game.addToGameDisplay(`<div class="message">THERE ARE NO CARD GAMES HERE</div>`);
                return;
            }
            
            // Reset blackjack state
            this.resetGame();
            
            // Check if we have money
            if (this.game.money < 1) {
                this.game.addToGameDisplay(`<div class="message">I'M BROKE!!!</div>`);
                return;
            }
            
            this.active = true;
            this.game.addToGameDisplay(`<div class="message">YOU HAVE $${this.game.money}00</div>`);
            this.game.addToGameDisplay(`<div class="system-message">
                HOW MANY DOLLARS WOULD YOU LIKE TO BET? (IN $100 INCREMENTS)
                <input type="number" id="blackjack-bet" min="1" max="${this.game.money}" value="1">
                <button id="place-bet">PLACE BET</button>
            </div>`);
            
            // Publish minigame state
            eventBus.publish(GameEvents.UI_REFRESH, {
                type: 'minigameStarted',
                game: 'blackjack',
                money: this.game.money
            });
        } catch (error) {
            console.error("Error starting blackjack game:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR STARTING BLACKJACK.</div>`);
            this.active = false;
        }
    }
    
    // Reset the game for a new round
    resetGame() {
        this.state = {
            playerCards: [],
            dealerCards: [],
            playerTotal: 0,
            dealerTotal: 0,
            bet: 0,
            gamePhase: 'betting' // betting, player, dealer, result
        };
        
        // Start a new game
        this.startGame();
    }
    
    // Place a bet for blackjack
    placeBlackjackBet(bet) {
        try {
            if (!this.active || this.state.gamePhase !== 'betting') return;
            
            // Validate bet
            bet = parseInt(bet);
            if (isNaN(bet) || bet < 1 || bet > this.game.money) {
                this.game.addToGameDisplay(`<div class="message">INVALID BET</div>`);
                return;
            }
            
            // Store bet
            this.state.bet = bet;
            this.state.gamePhase = 'player';
            
            // Deal initial cards
            this.state.playerCards = [this.dealBlackjackCard(), this.dealBlackjackCard()];
            this.state.dealerCards = [this.dealBlackjackCard(), this.dealBlackjackCard()];
            
            // Calculate totals
            this.state.playerTotal = this.calculateBlackjackTotal(this.state.playerCards);
            this.state.dealerTotal = this.calculateBlackjackTotal(this.state.dealerCards);
            
            // Display cards
            this.game.addToGameDisplay(`<div class="message">DEALER'S CARDS: [HIDDEN], ${this.state.dealerCards[1]}</div>`);
            this.game.addToGameDisplay(`<div class="message">YOUR CARDS: ${this.state.playerCards.join(', ')}</div>`);
            this.game.addToGameDisplay(`<div class="message">YOUR TOTAL: ${this.state.playerTotal}</div>`);
            
            // Check for blackjack
            if (this.state.playerTotal === 21) {
                this.game.addToGameDisplay(`<div class="message">YOU'VE GOT ***BLACKJACK***</div>`);
                this.game.money += Math.floor(this.state.bet * 1.5);
                this.game.addToGameDisplay(`<div class="message">YOU WIN $${Math.floor(this.state.bet * 1.5 * 100)}</div>`);
                this.state.gamePhase = 'result';
                this.blackjackGameEnd();
                return;
            }
            
            // Player's turn
            this.game.addToGameDisplay(`<div class="system-message">
                WOULD YOU LIKE A HIT? 
                <button id="blackjack-hit">YES</button>
                <button id="blackjack-stand">NO</button>
            </div>`);
        } catch (error) {
            console.error("Error placing blackjack bet:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR PLACING BET.</div>`);
        }
    }
    
    // Deal a card for blackjack
    dealBlackjackCard() {
        // Original game uses values 1-13 for cards
        const value = Math.floor(Math.random() * 13) + 1;
        
        if (value === 1) return 'A';
        if (value === 11) return 'J';
        if (value === 12) return 'Q';
        if (value === 13) return 'K';
        return value.toString();
    }
    
    // Calculate blackjack hand total
    calculateBlackjackTotal(cards) {
        let total = 0;
        let aces = 0;
        
        for (const card of cards) {
            if (card === 'A') {
                total += 11;
                aces += 1;
            } else if (card === 'J' || card === 'Q' || card === 'K') {
                total += 10;
            } else {
                total += parseInt(card);
            }
        }
        
        // Adjust for aces if needed
        while (total > 21 && aces > 0) {
            total -= 10;
            aces -= 1;
        }
        
        return total;
    }
    
    // Player hits in blackjack
    blackjackHit() {
        try {
            if (!this.active || this.state.gamePhase !== 'player') return;
            
            // Deal a card
            const card = this.dealBlackjackCard();
            this.state.playerCards.push(card);
            
            // Calculate new total
            this.state.playerTotal = this.calculateBlackjackTotal(this.state.playerCards);
            
            // Display cards
            this.game.addToGameDisplay(`<div class="message">YOU GET A ${card}</div>`);
            this.game.addToGameDisplay(`<div class="message">YOUR TOTAL: ${this.state.playerTotal}</div>`);
            
            // Check for bust
            if (this.state.playerTotal > 21) {
                this.game.addToGameDisplay(`<div class="message">BUSTED!</div>`);
                this.game.money -= this.state.bet;
                this.state.gamePhase = 'result';
                this.blackjackGameEnd();
                return;
            }
            
            // Player's turn continues
            this.game.addToGameDisplay(`<div class="system-message">
                WOULD YOU LIKE ANOTHER HIT? 
                <button id="blackjack-hit">YES</button>
                <button id="blackjack-stand">NO</button>
            </div>`);
        } catch (error) {
            console.error("Error in blackjack hit:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR DEALING CARD.</div>`);
        }
    }
    
    // Player stands in blackjack
    blackjackStand() {
        try {
            if (!this.active || this.state.gamePhase !== 'player') return;
            
            // Dealer's turn
            this.state.gamePhase = 'dealer';
            
            // Reveal dealer's cards
            this.game.addToGameDisplay(`<div class="message">DEALER'S CARDS: ${this.state.dealerCards.join(', ')}</div>`);
            this.game.addToGameDisplay(`<div class="message">DEALER'S TOTAL: ${this.state.dealerTotal}</div>`);
            
            // Dealer hits until 17 or higher
            while (this.state.dealerTotal < 17) {
                const card = this.dealBlackjackCard();
                this.state.dealerCards.push(card);
                this.state.dealerTotal = this.calculateBlackjackTotal(this.state.dealerCards);
                
                this.game.addToGameDisplay(`<div class="message">DEALER GETS A ${card}</div>`);
                this.game.addToGameDisplay(`<div class="message">DEALER'S TOTAL: ${this.state.dealerTotal}</div>`);
            }
            
            // Determine winner
            if (this.state.dealerTotal > 21) {
                this.game.addToGameDisplay(`<div class="message">DEALER BUSTS! YOU WIN!</div>`);
                this.game.money += this.state.bet;
            } else if (this.state.dealerTotal > this.state.playerTotal) {
                this.game.addToGameDisplay(`<div class="message">DEALER WINS</div>`);
                this.game.money -= this.state.bet;
            } else if (this.state.dealerTotal < this.state.playerTotal) {
                this.game.addToGameDisplay(`<div class="message">YOU WIN!</div>`);
                this.game.money += this.state.bet;
            } else {
                this.game.addToGameDisplay(`<div class="message">TIE GAME</div>`);
            }
            
            this.state.gamePhase = 'result';
            this.blackjackGameEnd();
        } catch (error) {
            console.error("Error in blackjack stand:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR DURING DEALER'S TURN.</div>`);
        }
    }
    
    // End blackjack game and ask to play again
    blackjackGameEnd() {
        try {
            // Check if out of money
            if (this.game.money < 1) {
                this.game.addToGameDisplay(`<div class="message">YOU'RE OUT OF MONEY!! SO LONG!!!!!!!</div>`);
                
                // Game over
                eventBus.publish(GameEvents.GAME_OVER, {
                    reason: "Out of money",
                    score: this.game.score
                });
                
                this.active = false;
                return;
            }
            
            this.game.addToGameDisplay(`<div class="message">YOU HAVE $${this.game.money}00</div>`);
            this.game.addToGameDisplay(`<div class="system-message">
                PLAY AGAIN? 
                <button id="blackjack-play-again">YES</button>
                <button id="blackjack-quit">NO</button>
            </div>`);
            
            // Publish money changed event
            eventBus.publish(GameEvents.MONEY_CHANGED, {
                newAmount: this.game.money
            });
        } catch (error) {
            console.error("Error ending blackjack game:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR ENDING GAME.</div>`);
        }
    }
    
    // End the game and return to main game
    endGame() {
        try {
            this.active = false;
            this.game.addToGameDisplay(`<div class="message">THANKS FOR PLAYING</div>`);
            
            // Publish minigame ended event
            eventBus.publish(GameEvents.MINIGAME_ENDED, {
                game: "BLACKJACK",
                money: this.game.money
            });
        } catch (error) {
            console.error("Error ending blackjack game:", error);
            this.game.addToGameDisplay(`<div class="message">ERROR ENDING GAME.</div>`);
        }
    }
}